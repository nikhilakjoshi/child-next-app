import Head from "next/head";
import clsx from "clsx";
import { Rubik } from "next/font/google";
import type {
  GetServerSidePropsContext,
  GetServerSideProps,
  InferGetServerSidePropsType,
} from "next";
import { useRouter } from "next/router";
import { useCallback, useEffect } from "react";

const font = Rubik({
  subsets: ["latin-ext"],
});

export const getServerSideProps = ({
  req,
  resolvedUrl,
}: GetServerSidePropsContext) => {
  const cookies = req.headers.cookie?.split("; ");
  const cookieTokenS = cookies?.find((cookie) => cookie.includes("token"));
  console.log("resolvedUrl", resolvedUrl);
  console.log("METHOD", req.method);
  console.log("cookies", req.headers.cookie);
  if (resolvedUrl !== "/login") {
    if (!cookieTokenS)
      return {
        redirect: {
          destination: "/login",
          permanent: false,
        },
      };
    const cookieToken = cookieTokenS.split("=")[1];
    if (!cookieToken)
      return {
        redirect: {
          destination: "/login",
          permanent: false,
        },
      };
    const parsed = Buffer.from(cookieToken, "base64").toString("utf-8");
    if (parsed !== "This is a secret token") {
      return {
        redirect: {
          destination: "/login",
          permanent: false,
        },
      };
    }
    const locationCookieS = cookies?.find((cookie) =>
      cookie.includes("location"),
    );
    const locationCookie = locationCookieS?.split("=")[1];
    return {
      props: {
        locationVal: locationCookie,
      },
    };
  }
  return {
    props: {},
  };
};

const Home: React.FC<
  InferGetServerSidePropsType<typeof getServerSideProps>
> = ({ locationVal }) => {
  const router = useRouter();

  const sayHello = useCallback(async () => {
    const resp = await fetch("/api/hello");
    const respJson = (await resp.json()) as { message: string };
  }, []);

  useEffect(() => {
    sayHello()
      .then((a) => {
        console.log(a);
      })
      .catch((e) => console.error(e));
  }, []);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={clsx("flex h-[100dvh] flex-col", font.className)}>
        <nav className="bg-[#255be3] px-4 py-2">
          <h1 className="text-xl text-white">Citi frame</h1>
        </nav>
        <div className="grid grow place-items-center bg-green-50 px-4 py-2">
          Post Login Content
          {locationVal
            ? `- Token generated on ${new Date(
                parseInt(locationVal),
              ).toString()}`
            : ""}
        </div>
      </main>
    </>
  );
};

export default Home;
